@inject GameState GameState
@implements IDisposable
<!--Item Stats Component-->
@if (Item != null)
{    <div class="row item-stat-box">
    @if (GetAttackValue() > 0)
    {
            <div class="col item-stat-info" 
         @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Damage", "This is a measure of how much this item boosts your damage. Higher numbers are better!")))"
         @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                <img src="data/Images/Attack.png" class="item-stat-image" /> @GetAttack()
                @if(GetAttackDifference() != 0)
                {
                    <span style="@GetColor(GetAttackDifference(), false)">(@GetAttackDifference())</span>
                }
                
            </div>
    }

        
            @if(GetRangedAttackValue() > 0){
                            <div  class="col item-stat-info"
         @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Ranged Damage", "This is a measure of how much this item boosts your damage with ranged weapons. Higher numbers are better!")))"
         @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                <img src="data/Images/Archery.png" class="item-stat-image" /> @GetRangedAttack() 
                    @if (GetRangedAttackDifference() != 0)
                    {
                        <span style="@GetColor(GetRangedAttackDifference(), false)">(@GetRangedAttackDifference())</span>
                    }
                </div>
            }
            @if(GetMagicAttackValue() > 0){
                           <div  class="col item-stat-info"
         @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Magic Damage", "This is a measure of how much this item boosts your magic damage. Higher numbers are better!")))"
         @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                <img src="data/Images/Stun.png" class="item-stat-image" /> @GetMagicAttack() 
                    @if(GetMagicAttackDifference() != 0)
                    {
                        <span style="@GetColor(GetMagicAttackDifference(), false)">(@GetMagicAttackDifference())</span>
                    }
                    
            </div>
            }
 
            @if (Item.EquipSlot != "None")
            {
                @if(GetArmor() != 0)
                {
                                <div class="col item-stat-info"
             @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Armor", "This is a measure of how much this item boosts your armor. Higher numbers are better!")))"
             @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                        <img src="data/Images/Armor.png" class="item-stat-image" /> @GetArmor() <span style="@GetColor(GetArmorDifference(), false)">(@GetArmorDifference())</span>
                    </div>
                }

                @if(Item.WeaponInfo?.AttackSpeed > 0 && GetSpeedDifference() != 0)
                {
                    <div  class="col item-stat-info"
         @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Speed", "This is a measure of how many game ticks this weapon attacks at. Lower is faster!")))"
         @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                    <img src="data/Images/Speed.png" class="item-stat-image" /> @GetSpeed() <span style="@GetColor(GetSpeedDifference(), true)">(@GetSpeedDifference())</span>
                </div>
                }
                
            }
            @if (GetGatherBonus() > 0)
            {
                <div  class="col item-stat-info"
         @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Gather Speed Bonus", "This is how much this item improves gathering speed when equipped.")))"
         @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                    <img src="data/Images/Bonus.png" class="item-stat-image" /> @((GetGatherBonus() * 100d).ToString("0.##"))%
                </div>
            }
        
    
    @if (Item.FoodInfo != null)
    {

            <div  class="col item-stat-info"
         @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Heal Amount", "This is a measure of how much this item heals you per heal.")))"
         @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                <img src="data/Images/HealAmount.png" class="item-stat-image" /> @GetHealAmount()
            </div>
            <div  class="col item-stat-info"
         @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Heal Duration", "This is a measure of how many times this item heals you.")))"
         @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                <img src="data/Images/HealDuration.png" class="item-stat-image" /> @GetHealDuration()
            </div>
            <div  class="col item-stat-info"
         @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Heal Speed", "This is a measure of how many game ticks this food takes to heal you. Lower is better!")))"
         @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                <img src="data/Images/Speed.png" class="item-stat-image" /> @GetHealSpeed()
            </div>
            @if (GetBoostedAmount() > 0)
            {
                <div  class="col item-stat-info"
         @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Boosts " + GetBoostedStat() + " by " + GetBoostedAmount().ToString("D"), "This is the skill that is boosted by this food.")))"
         @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                    <img src="data/Images/@(GetBoostedStat()).png" class="item-stat-image" /> @GetBoostedAmount()
                </div>
            }

    }
    </div>
}


@code {
    [Parameter]
    public GameItem Item { get; set; }

    public bool ItemHasCombatStats()
    {
        return Item.ArmorInfo != null || Item.WeaponInfo != null;
    }
    public string GetImage(string i)
    {
        if (GetAttackDifference() >= 0)
        {
            return "data/Images/" + i + "Up.png";
        }
        return "data/Images/" + i + "Down.png";
    }
    public string GetColor(int value, bool reverse)
    {
        if (reverse)
        {
            value = -value;
        }
        if (value > 0)
        {
            return "color:darkgreen;";
        }
        else if (value < 0)
        {
            return "color:darkred;";
        }
        return "color:black;";
    }
    public string GetAttack()
    {
        return GetAttackValue().ToString("D");
    }
    public int GetAttackValue()
    {
        return Item.WeaponInfo?.Damage ?? 0 + Item.ArmorInfo?.Damage ?? 0;
    }
    public string GetRangedAttack()
    {
        return GetRangedAttackValue().ToString("D");
    }
    public int GetRangedAttackValue()
    {
        return Item.WeaponInfo?.RangedDamage ?? 0 + Item.ArmorInfo?.RangedDamage ?? 0;
    }
    public string GetMagicAttack()
    {
        return GetMagicAttackValue().ToString("D");
    }
    public int GetMagicAttackValue()
    {
        return Item.WeaponInfo?.MagicDamage ?? 0 + Item.ArmorInfo?.MagicDamage ?? 0;
    }
    public int GetArmor()
    {
        return Item.WeaponInfo?.ArmorBonus ?? 0 + Item.ArmorInfo?.ArmorBonus ?? 0;
    }
    public int GetSpeed()
    {
        return Item.WeaponInfo?.AttackSpeed ?? 0;
    }
    public int GetHealAmount()
    {
        return Item.FoodInfo?.HealAmount ?? 0;
    }
    public int GetHealSpeed()
    {
        return Item.FoodInfo?.HealSpeed ?? 0;
    }
    public int GetHealDuration()
    {
        return Item.FoodInfo?.HealDuration ?? 0;
    }
    public string GetBoostedStat()
    {
        return Item.FoodInfo?.BuffedSkill ?? "None";
    }
    public double GetGatherBonus()
    {
        return Item.GatherSpeedBonus;
    }
    public int GetBoostedAmount()
    {
        return Item.FoodInfo?.BuffAmount ?? 0;
    }
    public int GetAttackDifference()
    {
        int bonus = Item.WeaponInfo?.Damage ?? 0 + Item.ArmorInfo?.Damage ?? 0;
        GameItem comp = Player.Instance.GetItemInSlot(Item.EquipSlot);
        if (comp == null)
        {
            return bonus;
        }
        int compBonus = comp.WeaponInfo?.Damage ?? 0 + comp.ArmorInfo?.Damage ?? 0;
        return bonus - compBonus;
    }
    public int GetRangedAttackDifference()
    {
        int bonus = Item.WeaponInfo?.RangedDamage ?? 0 + Item.ArmorInfo?.RangedDamage ?? 0;
        GameItem comp = Player.Instance.GetItemInSlot(Item.EquipSlot);
        if (comp == null)
        {
            return bonus;
        }
        int compBonus = comp.WeaponInfo?.RangedDamage ?? 0 + comp.ArmorInfo?.RangedDamage ?? 0;
        return bonus - compBonus;
    }
    public int GetMagicAttackDifference()
    {
        int bonus = Item.WeaponInfo?.MagicDamage ?? 0 + Item.ArmorInfo?.MagicDamage ?? 0;
        GameItem comp = Player.Instance.GetItemInSlot(Item.EquipSlot);
        if (comp == null)
        {
            return bonus;
        }
        int compBonus = comp.WeaponInfo?.MagicDamage ?? 0 + comp.ArmorInfo?.MagicDamage ?? 0;
        return bonus - compBonus;
    }
    public int GetArmorDifference()
    {
        int bonus = Item.WeaponInfo?.ArmorBonus ?? 0 + Item.ArmorInfo?.ArmorBonus ?? 0;
        GameItem comp = Player.Instance.GetItemInSlot(Item.EquipSlot);
        if (comp == null)
        {
            return bonus;
        }
        int compBonus = comp.WeaponInfo?.ArmorBonus ?? 0 + comp.ArmorInfo?.ArmorBonus ?? 0;
        return bonus - compBonus;
    }
    public int GetSpeedDifference()
    {
        int speed = Item.WeaponInfo?.AttackSpeed ?? 0;
        GameItem comp = Player.Instance.GetItemInSlot(Item.EquipSlot);
        if (comp == null)
        {
            return speed;
        }
        int compSpeed = comp.WeaponInfo?.AttackSpeed ?? 0;
        return speed - compSpeed;
    }

    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
