@inject GameState GameState
@implements IDisposable

<div class="custom-scroll" style="max-height:100vh;overflow-y:auto;">
@foreach(KeyValuePair<string, Inventory> pair in LootTracker.Instance.DataDict)
{
     <div style="background:black"> @getValueString(pair)
         <button class="btn btn-secondary" style="float: right;
                                                  height: 24px;
                                                  line-height: 12px;
                                                  border-radius: 0;" 
         @onclick=@(() => ResetInventory(pair.Value))>Reset</button>
         </div>
    <div style="display:flex;background:#151515;flex-wrap: wrap">
       
        @foreach(KeyValuePair<GameItem, int> itemPair in pair.Value.GetItems())
        {
                <ItemBoxComponent Item="@itemPair.Key" ShowAmount="@true" Inventory="@pair.Value"></ItemBoxComponent>
        }
    </div>
}
</div>


@code {

    public string getValueString(KeyValuePair<string, Inventory> pair)
    {
        try
        {
            double val = pair.Value.GetTotalValue();
            int kc = LootTracker.Instance.KCDict[pair.Key];
            if(val == 1)
            {
                return pair.Key + " x" + kc + " - 1 Coin"; 
            }
            return "" + pair.Key + " x" + kc + " - " + val + " Coins"; 
        }
        catch
        {
            return pair.Key;
        }

    }

    public void ResetInventory(Inventory i)
    {
        i.Clear();
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
