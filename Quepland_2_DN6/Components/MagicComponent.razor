@inject GameState GameState
@implements IDisposable

<h3 class="m-2">Magic</h3>
<div class="main-inventory custom-scroll">
@foreach(ISpell spell in MagicManager.Instance.Spells){
    @if(spell == null){
        <div>Null Spell</div>
    }
    else if(spell.Unlocked){
        <div class="unselectable" style="@GetBG(spell);@GetBorder(spell);margin:2px;height:50px;width:50px;position:relative;box-sizing: border-box;border-radius:0.25rem;" draggable="false">

            <img style="height: 46px;width: 46px; margin:2.5px;" src="/data/Images/@(spell.Name).png" draggable="false"
             oncontextmenu="return false;"
             onmouseup="@(new Action<MouseEventArgs>((args) => ShowMenu(args, spell)))"
                 @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowItemTooltip(e, spell.Name, spell.Description + "\n" + spell.GetCostText())))"
                 @onmouseout="@(new Action(() => GameState.HideTooltip()))"
                 @onclick="@(() => CastSpell(spell))" />
            
        </div>

    }
    
}
</div>
@if (MagicManager.Instance.NoSpellsUnlocked()){
    <div>You don't know any magic yet. Try exploring the world and see if you can find someone or something to teach you!</div>
}

@if (showInventory && currentSpell != null)
{
    <div>Select an item to cast @currentSpell.Name on.</div>
    <div class="main-inventory custom-scroll">
        @foreach (KeyValuePair<GameItem, int> item in Player.Instance.Inventory.GetUniqueItems().OrderBy(x => x.Key.ID))
        {
            if (item.Key != null && (GameState.HideLockedItems == false || item.Key.IsLocked == false))
            {

                <div oncontextmenu="return false;" draggable="false"
                    onmouseup="@(new Action<MouseEventArgs>((args) => CastSpell(currentSpell, item.Key)))">
                    <ItemBoxComponent Item="@item.Key" ShowAmount="@true" shouldRender="@item.Key.Rerender"></ItemBoxComponent>
                </div>

            }
        }
    </div>

}

@code {
    private bool showInventory;
    private ISpell currentSpell = null;

    string color = "rgba(0,212,255,1)";
    string cooldownColor = "rgba(255,212,0,1)";

    public string GetBorder(ISpell spell)
    {
        if(spell.TimeRemaining > 0)
        {
            return "border: solid 2px gold;box-shadow: gold 0px 0px 5px;";
        }
        return "";

    }
    public string GetBG(ISpell spell)
    {
        string bg = "background:#DDD";
        if (spell.CooldownRemaining > 0)
        {
            var h = (int)((spell.CooldownRemaining / (double)spell.Cooldown) * 100);
            var cooldown = (int)((Math.Max(spell.CooldownRemaining, 0) / Math.Max(spell.Cooldown, 1)) * 100);
            var showCooldown = cooldown > 0;

            bg = $"background: linear-gradient(0deg, #DDD {(showCooldown ? cooldown : h)}%, {(showCooldown ? cooldownColor : color)} {(showCooldown ? cooldown : h)}%)";
        }


        return bg;
    }

    public void ToggleAutoCastSpell(ISpell spell)
    {

        if (spell.CanPayCost() && GameState.AutoCastSpells.Contains(spell) == false)
        {
            MessageManager.AddMessage($"You begin autocasting {spell.Name}.");
            GameState.AutoCastSpells.Add(spell);
        }
        else if(GameState.CancelAutoCastSpells.Contains(spell) == false)
        {
            MessageManager.AddMessage($"You stop autocasting {spell.Name}.");
            GameState.CancelAutoCastSpells.Add(spell);
        }
    }

    public void CastSpell(ISpell spell){
        if(spell.Target == "Inventory"){
            spell.Cast(Player.Instance.Inventory);
        }
        else if (spell.Target == "Item")
        {
            showInventory = true;
            spell.Cast(Player.Instance);
            currentSpell = spell;
        }
        else if(spell.Target == "Player"){
            spell.Cast(Player.Instance);
        }
        else if(spell.Target == "Monster"){
             spell.Cast(BattleManager.Instance.Target);
        }
        else if (spell.Target == "Gather" || spell.Target == "None")
        {
            spell.Cast();
        }

    }
    public void CastSpell(ISpell spell, GameItem item)
    {
        if (spell.Target == "Item")
        {
            spell.Cast(Player.Instance.Inventory, item);
            GameState.UpdateState();
        }


    }
    public void ShowMenu(MouseEventArgs args, ISpell spell)
    {
        if (args.Button == 2)
        {
            GameState.CurrentContextMenu = new ContextMenu();

            GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Cast " + spell.Name, new Action(() => CastSpell(spell))));
            if (GameState.AutoCastSpells.Contains(spell))
            {
                GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Cancel Autocast " + spell.Name, new Action(() => ToggleAutoCastSpell(spell))));
            }
            else
            {
                GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Autocast " + spell.Name, new Action(() => ToggleAutoCastSpell(spell))));
            }
            GameState.ShowContextMenu(args);
        }
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
