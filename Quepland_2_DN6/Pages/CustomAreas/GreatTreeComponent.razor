@page "/World/GreatTree"
@inject GameState GameState
@inject NavigationManager UriHelper
@implements IDisposable


@if (thisArea != null)
{
     <AreaComponent areaURL="GreatTree"></AreaComponent>
    @if(AreaManager.Instance.GetAreaByURL("RaabitGate").IsUnlocked == false)
    {
        <div class="progress my-2" 
                @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Climbing Progress", Math.Round((double)GreatTree.Progress / GreatTree.Height * 100) + "%")))"
                        @onmouseout="@(new Action(() => GameState.HideTooltip()))" style="border-radius:0;background-color:darkgray">                
                <div class="progress-bar" style="width:@((double)GreatTree.Progress / GreatTree.Height * 100)%;color:black;background-color:#51d051">

                </div>
         </div>
        @if(GreatTree.Progress < GreatTree.Height)
        {
            @if ((Player.Instance.Inventory.HasItem("Rope") || Player.Instance.Inventory.HasItem("Magic Rope")) && !IsClimbing)
        {
            <button class="btn btn-primary" style="margin-top:10px;" @onclick="@(() => StartClimbingTree())">Climb Tree</button>
        }
        else if (IsClimbing)
        {        
            <div class="progress vertical my-2" style="border-radius:0;background-color:#51d051;width:15px;height:200px;">     
                @if(NextClimbTick > GameState.CurrentTick)
                {
                <div class="progress-bar" style="height:@((((NextClimbTick - GameState.CurrentTick) / (double)TicksPerClimb) * 100))%;width:15px;color:darkgray;background-color:black">

                </div>
                }

            </div>


            <button class="btn btn-primary" style="margin-top:10px;" @onclick="@(() => StopClimbing())">Stop Climbing Tree</button>
        }
        else
        {
            <button class="btn btn-primary" style="margin-top:10px;opacity:0.5"
                    @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e,"You'll need some rope to climb this tree.")))"
                    @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                Climb Tree
            </button>
            }
        }
    }
}

@code {

    [Parameter]
    public string areaURL { get; set; }
    public Area thisArea { get; set; }
    public long NextClimbTick;
    public long TicksPerClimb;
    public bool IsClimbing;
    public AreaUnlock a;
    public List<string> RegularClimbMessages = new List<string>()
    {
        "You grip the side of the tree and pull yourself upwards.",
        "You attach another length of rope to the tree and continue up.",
        "You climb another rope-length.",
        "You pull yourself up the side of the tree.",
        "You climb up again."
    };

    public List<string> MagicalClimbMessages = new List<string>()
    {
        "You grip the side of the tree and pull yourself upwards easily.",
        "You attach another length of rope to the tree and quickly continue up.",
        "You climb another rope-length with ease.",
        "You quickly pull yourself up the side of the tree.",
        "You climb up again, the magical rope doing most of the work."
    };

    private void StartClimbingTree()
    {
        if(GreatTree.Progress >= GreatTree.Height)
        {
            IsClimbing = false;
            MessageManager.AddMessage("You reach an opening near the top of the tree and pull yourself up.");
            AreaManager.Instance.GetAreaByURL("RaabitGate").IsUnlocked = true;
            GameState.GoToArea("RaabitGate");
            return;
        }
        if(Player.Instance.Inventory.HasItem("Magic Rope"))
        {
            MessageManager.AddMessage(MagicalClimbMessages[GameState.Random.Next(MagicalClimbMessages.Count)]);
            NextClimbTick = GameState.CurrentTick + (50 - Math.Min(45, (((Player.Instance.GetLevel("Strength") / 3) + (Player.Instance.GetLevel("Deftness")) / 3))));
            TicksPerClimb = NextClimbTick - GameState.CurrentTick;
            IsClimbing = true;
        }
        else if (Player.Instance.Inventory.HasItem("Rope"))
        {
            MessageManager.AddMessage(RegularClimbMessages[GameState.Random.Next(RegularClimbMessages.Count)]);
            NextClimbTick = GameState.CurrentTick + (50 - Math.Min(45, (((Player.Instance.GetLevel("Strength") / 5) + (Player.Instance.GetLevel("Deftness")) / 5))));
            IsClimbing = true;
            TicksPerClimb = NextClimbTick - GameState.CurrentTick;
        }
        else
        {
            MessageManager.AddMessage("You have run out of rope! You'll have to find some more.");
            IsClimbing = false;
        }

    }
    private void StopClimbing()
    {
        IsClimbing = false;
    }

    private void FindBattles()
    {
        GameState.StopNonCombatActions();
        BattleManager.Instance.StartBattle(thisArea);
        GameState.Location = "Battle";
        UriHelper.NavigateTo("World/Battle/");
    }

    private void EnterBuilding(string buildingURL)
    {
        GameState.StopActions();
        GameState.Location = areaURL + "/" + buildingURL;
        UriHelper.NavigateTo("World/" + areaURL + "/" + buildingURL);
    }
    private void EnterDojo(string dojoURL)
    {
        GameState.StopActions();
        GameState.Location = "Dojo/" + dojoURL;
        UriHelper.NavigateTo("World/Dojo/" + dojoURL);
    }
    private void EnterDungeon(string dungeonURL)
    {
        GameState.StopActions();
        GameState.Location = dungeonURL;
        UriHelper.NavigateTo("Underworld/" + dungeonURL);
    }
    private void EnterSmithy()
    {
        GameState.StopActions();
        GameState.Location = "Smithy/" + areaURL;
        UriHelper.NavigateTo("World/Smithy/" + areaURL);
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
        GreatTree.Initialize();

    }
    protected override void OnParametersSet()
    {
        areaURL = "GreatTree";
        thisArea = AreaManager.Instance.GetAreaByURL(areaURL);
        a = new AreaUnlock()
            {
                ButtonText = "Climb Inside Tree",
                AreaURL = "RaabitGate"
            };
        //GameState.NavMenu.ChangeOpenRegion(AreaManager.Instance.GetRegionForArea(thisArea), false);
        GameState.UpdateState();

    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e)
    {

        if (NextClimbTick <= GameState.CurrentTick && IsClimbing)
        {
            if (GreatTree.Progress < GreatTree.Height)
            {
                if (Player.Instance.Inventory.RemoveItems(ItemManager.Instance.GetItemByName("Magic Rope"), 1) == 1)
                {
                    GreatTree.Climb(2);
                    StartClimbingTree();

                }
                else if (Player.Instance.Inventory.RemoveItems(ItemManager.Instance.GetItemByName("Rope"), 1) == 1)
                {

                    GreatTree.Climb(1);
                    StartClimbingTree();
                }
                else
                {
                    MessageManager.AddMessage("You have run out of rope! You'll have to find some more.");
                    IsClimbing = false;
                }
            }
            else if(GreatTree.Progress >= GreatTree.Height)
            {
                IsClimbing = false;
                MessageManager.AddMessage("You reach an opening near the top of the tree and pull yourself up.");
                AreaManager.Instance.GetAreaByURL("RaabitGate").IsUnlocked = true;
                GameState.GoToArea("Raabit Gate");
            }
        }
        

        StateHasChanged();
    }
}
