@page "/World/UpperBranches"
@inject GameState GameState
@inject NavigationManager UriHelper
@implements IDisposable


@if (thisArea != null)
{
    @if (BattleBegun == true)
    {
        <CombatComponent></CombatComponent>

        @if (BattleManager.Instance.BattleHasEnded)
        {
            <div>
                    <button class="btn btn-primary" @onclick="@(() => FightRuwohane())">Fight Again</button>
                </div>
        }
    }
    else
    {
        
        @if(CurrentBranch == 32)
        {
            <h1>@RuwohaneLureArea</h1>
            <p>@RuwohaneLureDescription</p>
        }
        else
        {
            <h1>@thisArea.Name</h1>
            <p>@thisArea.Description</p>
        }
        
        <div class="row" style="position:relative;width:100%;height:50%">
        @foreach(int branch in CurrentBranches)
        {
            if(GetFacingDirection(CurrentBranch, branch) == "North")
            {
                <button class="btn btn-primary m-3" style="position:absolute;top:10px;left:@(positionDict[branch])%" @onclick=@(() => JumpToBranch(branch))>Jump @GetRelativeDirection(branch)</button>
            }
            else if(GetFacingDirection(CurrentBranch, branch) == "East")
            {
                <button class="btn btn-primary m-3" style="position:absolute;right:10px;bottom:@(positionDict[branch])%" @onclick=@(() => JumpToBranch(branch))>Jump @GetRelativeDirection(branch)</button>
            }
            else if(GetFacingDirection(CurrentBranch, branch) == "South")
            {
                <button class="btn btn-primary m-3" style="position:absolute;bottom:10px;right:@(positionDict[branch])%" @onclick=@(() => JumpToBranch(branch))>Jump @GetRelativeDirection(branch)</button>
            }
            else if(GetFacingDirection(CurrentBranch, branch) == "West")
            {
                <button class="btn btn-primary m-3" style="position:absolute;left:10px;top:@(positionDict[branch])%" @onclick=@(() => JumpToBranch(branch))>Jump @GetRelativeDirection(branch)</button>
            }
            else
            {
                <button class="btn btn-primary m-3" @onclick=@(() => JumpToBranch(branch))>Jump @GetRelativeDirection(branch)</button>
            }
            
        }

        @if (CurrentBranch == 32 )
        {
            <button class="btn btn-primary m-3" style="position:absolute;left:50%;top:50%;" @onclick=@(() => FightRuwohane())>Lure Ruwohane</button>
        }
        else if (hasFruit)
        {
            <button class="btn btn-primary m-3" style="position:absolute;left:@FruitLeftPos;top:@FruitTopPos;" @onclick=@(() => GatherFruit())>Harvest Fruit</button>
        }
    </div>
    }
    
    

}

@code {
    //TODO:Set Branch locations specifically (No random)
    [Parameter]
    public string areaURL { get; set; }
    public Area thisArea { get; set; }
    //N S E W
    public int[] sameSideOffsets = new int[] { 0, 0, 0, 0 };

    public long NextClimbTick;
    public bool IsClimbing;
    public bool hasFruit;
    public List<int> CurrentBranches = new List<int>();
    public int CurrentBranch = 0;
    public int PreviousBranch = 0;
    public string FacingDirection = "South";
    public string FruitLeftPos = "";
    public string FruitTopPos = "";
    public bool BattleBegun;
    public string RuwohaneLureArea = "The Dark Branch";
    public string RuwohaneLureDescription = "It's much darker here. Below you can hear a soft voice singing in the darkness, you feel the urge to respond...";
    public List<string> positions = new List<string>() { "North", "South", "East", "West" };
    public List<string> RandPos = new List<string>();
    public Dictionary<int, int> positionDict = new Dictionary<int, int>();
    public List<string> JumpingMessages = new List<string>()
        {
            "You leap to the next branch.",
            "You run along the branch and carefully step across.",
            "You vault yourself quickly to the nearby branch.",
            "You bounce from branch to branch along the way.",
            "You dive to the next branch, deftly righting yourself on landing.",
            "You hurdle over an opposing branch and find your footing.",
            "You bound forward to the branch and expertly land, ready to jump again.",
            "You jolt forward along the branch.",
            "You spring from small branch to small branch, never slowing down.",
            "You clear the gap and swiftly continue on your way.",
            "You hop along a pair of branches that have twisted together.",
            "The branches bend under your feet, but you keep your balance.",
            "A gust of wind propels you across as you jump.",
            "There's a satisfying 'thud' as you land on the branch."

        };
    public List<string> JumpFailMessages = new List<string>()
        {
            "You critically fail at jumping, hurting yourself in the process.",
            "You greatly underestimate the gap and smash into a branch below.",
            "You smash your face into a branch as you land.",
            "You twist both your ankles on the landing.",
            "You bend the branch on landing and tumble off it, crashing into several others before catching yourself.",
            "Your target branch was a terrible choice, it shatters with a loud snap and you scrape past the splintery stub.",
            "The branch almost gives under your weight, giving you just enough time to slip and hit your head on a nearby branch before snapping.",
            "The branch easily buckles under your weight, sending you flying off.",
            "You trip before jumping and stumble your way across a number of hard branches.",
            "You twist your ankle on the landing.",
            "You bend the branch on landing and tumble off it.",
            "Your target branch was a poor choice, it snaps and you scrape past the shattered stub.",
            "The branch buckles under your weight, sending you tumbling off.",
            "You trip before jumping and stumble your way across.",
            "You trip and fall, barely catching yourself before it's too late.",
            "An unexpected wind blows you off course, and you crash into the wrong branch.",
            "The branch gives far more than you expect and you slip off.",
            "You slip and hurt yourself upon jumping.",
            "You slip and fall, barely catching yourself.",
            "An unexpected wind knocks you off course, crashing you into a nearby branch.",
            "The branch moves unexpectedly and you slip off.",
            "You slip and hurt yourself upon landing.",
            "You slip as you land and hurt yourself trying to regain your balance.",
            "You overestimate the distance and have to catch the branch with your hands as you fly past.",
            "You almost land properly, but slip at the last second, hurting yourself."


        };
    public Dictionary<int, List<int>> Branches = new Dictionary<int, List<int>>()
    {
        {0, new List<int>(){5, 36}},
        {2,new List<int>(){11, 12, 3} },
        {3,new List<int>(){2, 4, 13} },
        {4,new List<int>(){3, 5, 24} },
        {5,new List<int>(){0, 4, 15} },
        {11,new List<int>(){2, 12, 30} },
        {12,new List<int>(){2, 11, 22} },
        {13,new List<int>(){3, 22, 24} },
        {15,new List<int>(){5, 34, 36} },
        {22,new List<int>(){12, 13, 32} },
        {24,new List<int>(){4, 13, 33} },
        {30,new List<int>(){11, 31} },
        {31,new List<int>(){30, 32, 41} },
        {32,new List<int>(){22, 31, 42} },
        {33,new List<int>(){24, 34, 43} },
        {34,new List<int>(){15, 33, 44} },
        {36,new List<int>(){0, 15, 45} },
        {41,new List<int>(){31, 42} },
        {42,new List<int>(){32, 41, 52} },
        {43,new List<int>(){33, 52} },
        {44,new List<int>(){34, 54} },
        {45,new List<int>(){36, 55} },
        {52,new List<int>(){42, 43, 53} },
        {53,new List<int>(){52, 54, 63} },
        {54,new List<int>(){53, 44, 55} },
        {55,new List<int>(){45, 54, 65} },
        {63,new List<int>(){53, 65} },
        {65,new List<int>(){55, 63} },
    };

    public string GetRandomPos()
    {
        int pos = GameState.Random.Next(25, 75);
        return pos + "%";
    }

    public int GetPos(int pos)
    {
        int x = (pos + 1) % 8 * 9;
        if(x < 10)
        {
            x += 2;
            x *= 7;
        }
        if(x < 25)
        {
            x += 1;
            x *= 3;
        }
        return Math.Clamp(x, 25, 75);
    }
    public void FightRuwohane()
    {
        var Ruwohane = BattleManager.Instance.GetMonsterByName("Ruwohane");
        BattleManager.Instance.CurrentOpponents.Clear();
        BattleManager.Instance.CurrentOpponents.Add(Ruwohane);
        BattleManager.Instance.SetBoss(new Quepland_2_DN6.Bosses.Ruwohane());
        BattleManager.Instance.StartBattle();
        BattleBegun = true;

    }

    public string GetRelativeDirection(int branch)
    {
        if(branch == PreviousBranch)
        {
            return "Directly Back";
        }
        string newDir = GetFacingDirection(CurrentBranch, branch);
        if(newDir == FacingDirection)
        {
            return "Straight Ahead";
        }
        else if(newDir == "North" && FacingDirection == "East" ||
                newDir == "South" && FacingDirection == "West" ||
                newDir == "East" && FacingDirection == "South" ||
                newDir == "West" && FacingDirection == "North")
        {
            return "Left";
        }
        else if(newDir == "North" && FacingDirection == "South" ||
                newDir == "South" && FacingDirection == "North" ||
                newDir == "East" && FacingDirection == "West" ||
                newDir == "West" && FacingDirection == "East")
        {
            return "Back";
        }
        return "Right";

    }
    public void GatherFruit(){

        if(Player.Instance.Inventory.AddItem("Great Tree Fruit"))
        {
            MessageManager.AddMessage("You harvest a fruit from the great tree.");
            hasFruit = false;
            GameState.UpdateState();
        }
        else
        {
            MessageManager.AddMessage("Your inventory is full.");
        }
    }
    public void GetBranches(int branch)
    {
        CurrentBranches = Branches[branch];
    }

    public void JumpToBranch(int branch)
    {
        int roll = GameState.Random.Next(Player.Instance.GetLevel("Deftness") / 4, Player.Instance.GetLevel("Deftness"));
        if(roll < 25)
        {
            Player.Instance.CurrentHP -= 20;
            MessageManager.AddMessage(JumpFailMessages[roll]);
        }
        else
        {
            MessageManager.AddMessage(JumpingMessages[GameState.Random.Next(JumpingMessages.Count)]);
        }
        FacingDirection = GetFacingDirection(CurrentBranch, branch);
        Player.Instance.GainExperience("Deftness", Player.Instance.GetLevel("Deftness") * 5);
        if(GameState.Random.Next(0, 100) >= 60)
        {
            hasFruit = true;

        }
        else{
            hasFruit = false;
        }
        if (hasFruit)
        {
            FruitLeftPos = GetRandomPos();
            FruitTopPos = GetRandomPos();
        }
        GetBranches(branch);
        sameSideOffsets = new int[] { 0, 0, 0, 0 };

        PreviousBranch = CurrentBranch;
        CurrentBranch = branch;

        int iterator = 0;
        positionDict.Clear();
        foreach(int b in Branches[branch])
        {
            int pos = GetPos(b);
            int offset = positions.IndexOf(GetFacingDirection(branch, b));
            positionDict.Add(b, pos + sameSideOffsets[offset]);
            sameSideOffsets[offset] = pos > 50 ? -25 : 25;
            iterator++;
        }
       
    }
    public string GetFacingDirection(int startBranch, int branch)
    {
        int diff = Math.Abs(startBranch - branch);
        //Check N/S
        int row = startBranch / 10;
        int compRow = branch / 10;
        if(compRow > row)
        {
            return "South";
        }
        else if(compRow < row)
        {

            return "North";
        }
        //Check E/W
        if(CurrentBranch > branch)
        {
            return "West";
        }
        else
        {
            return "East";
        }
    }

    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    protected override void OnParametersSet()
    {
        areaURL = "UpperBranches";
        thisArea = AreaManager.Instance.GetAreaByURL(areaURL);
        JumpToBranch(0);
        GameState.UpdateState();

    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e)
    {
        StateHasChanged();
    }
}
