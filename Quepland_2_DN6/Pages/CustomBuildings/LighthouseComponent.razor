@page "/World/CantilaBeach/CantilaLighthouse"
@inject GameState GameState
@inject NavigationManager UriHelper

    <h1>The Lighthouse</h1>

@if (Player.Instance.LighthouseLocation == "Outside")
{
    <br />
    <button class="btn btn-primary" @onclick="@(() => Exit())">Return to the beach</button>
    <br />
    @if(QuestManager.Instance.GetQuestByName("Queple's Sword").Progress >= 10)
    {
    <div>There is a small door on the front of the lighthouse, it appears to have snapped off its hinges. A staircase wraps around to the top of the tower.</div>
    <div>
        <button class="btn btn-primary" @onclick="@(() => ChangeLocations("Tower Top"))">Climb up the stairs</button>

        <button class="btn btn-primary" @onclick="@(() => ChangeLocations("B-1"))">Enter the doorway</button>
    </div>
    }
    else
    {
            <div>There is a small door on the front of the lighthouse, but it's locked. A staircase wraps around to the top of the tower.</div>
    <div>
        <button class="btn btn-primary" @onclick="@(() => ChangeLocations("Tower Top"))">Climb up the stairs</button>
    </div>
    }

}
else if (Player.Instance.LighthouseLocation == "Tower Top")
{
    <br />
    <button class="btn btn-primary" @onclick="@(() => Exit())">Return to the beach</button>
    <br />
    <div>The lighthouse is shining brightly, but there's no one here. You feel a slight rumble beneath your feet. A strange desire to open the door down below stirs within you.</div>
    <div>
        <button class="btn btn-primary" @onclick="@(() => ChangeLocations("Outside"))">Climb down the stairs</button>
    </div>
}
else if (Player.Instance.LighthouseLocation == "B-1")
{
    <br />
<button class="btn btn-primary" @onclick="@(() => Exit())">Return to the beach</button>
<br />
    <div>The door swings open, revealing a spiral staircase that continues down into the dark. The floor rumbles and a gust of wind blows past you as you descend the steps. 
        At the bottom of the stairs you enter a small room with an elaborately engraved wall. At the center is a small door handle, floating in the air.</div>
    <Quepland_2_DN6.Components.NPCDialogComponent npc="Lighthouse Wall"></Quepland_2_DN6.Components.NPCDialogComponent>
    <button class="btn btn-primary" @onclick="@(() => EnterGauntlet())">Touch the handle</button>

    @if (FollowerManager.Instance.HasFollowerCapableOf("Adventure"))
    {
        @if(Player.Instance.CurrentFollower != null && Player.Instance.CurrentFollower.AutoCollectSkill == "Adventurer")
        {
            <button class="btn btn-primary m-2" @onclick=@(() => AutoRaid())>Enter with @Player.Instance.CurrentFollower.Name</button>
        }
        else
        {
            <button class="btn btn-primary m-2 disabled" >Enter with Follower</button>
        }
        
    }

}
else if(Player.Instance.LighthouseLocation == "AutoRaid")
{
    <div>
        Progress:
        <div class="progress" style="width:100%;height:20px;font-size:large;position:relative;margin-top:10px;">

            <div class="progress-bar" style="width:@(GetRaidProgress());background-color:mediumpurple">
            </div>
        </div>
    </div>
    @if (GameState.CurrentAFKAction != null && GameState.CurrentAFKAction.IsReady())
    {
        <button class="btn btn-primary m-2" @onclick=@(() => CompleteAutoRaid())>Loot and Leave</button>
    }
    else if (GameState.CurrentAFKAction != null)
    {
        <button class="btn btn-primary m-2" @onclick=@(() => CancelAutoRaid())>Flee the Lighthouse</button>
    }
    else
    {
        <button class="btn btn-primary m-2" @onclick=@(() => CancelAutoRaid())>Flee the Lighthouse</button>
    }
  
}
else if (Player.Instance.LighthouseLocation == "B-2")
{
    <div>The way forward is lighted with a thin layer of glowing leaves. Ahead you can hear the muffled sound rattling of bones and scraping of metal against stone.</div>
    <button class="btn btn-primary" @onclick="@(() => StartGauntlet())">Begin Descending</button>
}
else if(Player.Instance.LighthouseLocation == "Gauntlet")
{
    //Boss Fight
    if(currentFloor == 5)
    {
        <button class="btn btn-primary m-2" @onclick="@(() => ChangeLocations("Boss"))">Enter Room</button>
    }
    else if(room == "Entrance")
    {
        <div>@GetDescription()</div>
 
        <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Gather"))">Enter Nature Chamber</button>
        <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Artisan"))">Enter Workshop</button>
        <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Combat"))">Enter Barracks</button>
        <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Descend"))">Descend Stairs</button>
    }
    else if(room == "Gather")
    {
        @if (BattleManager.Instance.BattleHasEnded)
        {
            <div>@GetDescription()</div>

            <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Artisan"))">Enter Workshop</button>
            <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Gather"))">Find another stormling here</button>
            <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Combat"))">Enter Barracks</button>
            <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Descend"))">Descend Stairs</button>

            <Quepland_2_DN6.Components.GatherButtonComponent ActionText="Catch Fish:Crab,Manta Ray,Scallop:You start fishing..."></Quepland_2_DN6.Components.GatherButtonComponent>
            <br />
            <Quepland_2_DN6.Components.GatherButtonComponent ActionText="Gather Wheat:Wheat:You begin picking wheat..."></Quepland_2_DN6.Components.GatherButtonComponent>
            <br />
            <Quepland_2_DN6.Components.ConvertItemsComponent ActionText="Gather Water from the river:Bucket of Water:Empty Bucket:You begin drawing water from the river."></Quepland_2_DN6.Components.ConvertItemsComponent>
            <br />
        }
        else
        {
            <CombatComponent></CombatComponent>
        }
    }
    else if(room == "Artisan")
    {
        @if (BattleManager.Instance.BattleHasEnded)
        {
            <div>@GetDescription()</div>

            <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Artisan"))">Find another stormling here</button>
            <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Gather"))">Enter Nature Chamber</button>
            <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Combat"))">Enter Barracks</button>
            <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Descend"))">Descend Stairs</button>


            <Quepland_2_DN6.Components.GatherButtonComponent ActionText="Collect Rolls:Rice Roll:You start gathering rice rolls."></Quepland_2_DN6.Components.GatherButtonComponent>
            <br />
            <Quepland_2_DN6.Components.OvenComponent></Quepland_2_DN6.Components.OvenComponent>
            <br />
            <Quepland_2_DN6.Pages.SmithyComponent Location="Lighthouse"></Quepland_2_DN6.Pages.SmithyComponent>
        }
        else
        {
            <CombatComponent></CombatComponent>
        }
    }
    else if(room == "Combat")
    {
        
        @if (BattleManager.Instance.BattleHasEnded)
        {
            <div>You are in an underground labyrinth.</div>
            <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Artisan"))">Enter Workshop</button>
            <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Gather"))">Enter Nature Chamber</button>
            <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Combat"))">Find another stormling here</button>
            <button class="btn btn-primary m-2" @onclick="@(() => ChangeRoom("Descend"))">Descend Stairs</button>
        }
        else
        {
            <div>@GetDescription()</div>
             <CombatComponent></CombatComponent>
        }
       
        
    }
    else if(room == "Descend")
    {
        <div>@GetDescription()</div>
        <button class="btn btn-primary m-2" @onclick="@(() => Descend())">Continue Downard</button>
    }
}
else if(Player.Instance.LighthouseLocation == "Boss")
{
    @if (BattleManager.Instance.BattleHasEnded)
    {
        <div>@GetDescription()</div>
        <button class="btn btn-primary m-2" @onclick="@(() => LootAndLeave())">Enter the staircase</button>
    }
    else
    {
        <CombatComponent></CombatComponent>
    }
}

@code {

    private string room = "Entrance";
    private int currentFloor = 1;

    private Dictionary<string, List<string>> RoomEnemies = new Dictionary<string, List<string>>()
    {
        {"Artisan",new List<string>(){ "Wilting Stormling", "Wilting Stormling", "Waning Stormling", "Degenerate Stormling" } },
        {"Gather",new List<string>(){ "Withered Stormling", "Withered Stormling", "Budding Stormling", "Floral Stormling" } },
        {"Combat",new List<string>(){ "Weakened Stormling",  "Weakened Stormling", "Grassy Stormling", "Mossy Stormling" } }
    };

    private Dictionary<string, string> Descriptions = new Dictionary<string, string>() 
    { 
        {"Entrance", "The cold floor has fresh footprints leading in one direction. You can smell baked bread in another. A warm glow illuminates a third path."},
        {"Gather", "You find a small forest growing here. A small stream flows by, full of some kinds of fish."},
        {"Artisan", "Prepared rice rolls sit in a pile near the oven. A large smithy is still warm but unattended."},
        {"Combat", "Some of the creatures that live down here have spotted you!"},
        {"Descend", "A staircase leads deeper into the dungeon. An icy wind blows steadily upward out of the entryway."},
        {"Boss", "The stormwalker lies motionless. You can see a stairway at the back end of the room."}
    };
    public void AutoRaid()
    {
        if (CheckForItemsInInventory())
        {
            MessageManager.AddMessage("Your follower reminds you you can't take anything with you inside the dungeon.");
            GameState.UpdateState();
            return;
        }
        var raidCompletionTime = GameState.Random.Next((int)(GameState.BestLighthouseTime * 1.5), GameState.BestLighthouseTime * 2);
        int minutes = Math.Max(10, GameState.TicksToSeconds(raidCompletionTime) / 60);
        AFKAction afkAction = new AFKAction();
        afkAction.IsActive = true;
        afkAction.StartTime = DateTime.UtcNow;
        afkAction.ButtonText = "Lighthouse";
        afkAction.ReturnTime = DateTime.UtcNow.AddMinutes(minutes);
        MessageManager.AddMessage($"You enter the lighthouse with {Player.Instance.CurrentFollower.Name}."); 
        Player.Instance.LighthouseLocation = "AutoRaid";
        GameState.StartingLighthouseTick = GameState.CurrentTick;
        GameState.IsInLighthouse = true;
        GameState.CurrentAFKAction = afkAction;
        GameState.SaveGame = true;
        GameState.UpdateState();
    }
    public string GetRaidProgress()
    {
        if (GameState.CurrentAFKAction != null)
        {
            var total = GameState.CurrentAFKAction.ReturnTime.Subtract(GameState.CurrentAFKAction.StartTime).TotalSeconds;
            var timeSinceStart = GameState.TicksToSeconds(GameState.CurrentTick - GameState.StartingLighthouseTick);
            return ((timeSinceStart / total) * 100) + "%";
        }
        return "-1%";
    }
    public void CompleteAutoRaid()
    {
        LootAndLeave();
        GameState.CurrentAFKAction.IsActive = false;
        GameState.CurrentAFKAction = null;
        GameState.UpdateState();
    }
    public void CancelAutoRaid()
    {
        Player.Instance.LighthouseLocation = "Outside";
        GameState.IsInLighthouse = false;
        if (GameState.CurrentAFKAction != null)
        {
            GameState.CurrentAFKAction.IsActive = false;
        }

        GameState.CurrentAFKAction = null;
        GameState.UpdateState();
    }
    public string GetDescription()
    {
        return Descriptions[room];
    }
    private void Descend()
    {
        currentFloor++;
        if(currentFloor == 4)
        {
            Player.Instance.LighthouseLocation = "Boss";
            room = "Boss";
            BattleManager.Instance.CurrentOpponents.Clear();

            BattleManager.Instance.CurrentOpponents.Add(BattleManager.Instance.GetMonsterByName("Stormwalker"));
            BattleManager.Instance.SetBoss(new Quepland_2_DN6.Bosses.Stormwalker());
            BattleManager.Instance.StartBattle();
        }
        else
        {
            room = "Entrance";
        }

    }
    public void LootAndLeave()
    {
        Player.Instance.LighthouseLocation = "Outside";
        GameState.IsInLighthouse = false;
        int duration = GameState.CurrentTick - GameState.StartingLighthouseTick;
        if (GameState.Random.Next(7) == 0 && GameState.BestLighthouseTime != int.MaxValue && !FollowerManager.Instance.GetFollowerByName("Kenbo Daito").IsUnlocked)
        {
            FollowerManager.Instance.GetFollowerByName("Kenbo Daito").IsUnlocked = true;
            MessageManager.AddMessage($"You meet another adventurer in the workshop. He grasps your ankle before you depart. Back in the lighthouse, he offers to help you for saving his life. He spent years in the labyrinth and could never find a way to escape... But now he kind of misses it back there.", "red");
        }
        else
        {
            MessageManager.AddMessage($"You descend the stairs and arrive in a small workshop. You grab something from a pile of valuables in each hand before a strange light overtakes you. You find yourself back outside the lighthouse.");

        }

        MessageManager.AddMessage($"You made it through the lighthouse in {TimeSpan.FromSeconds(duration / 5).ToString()}.");
        if (duration < GameState.BestLighthouseTime && GameState.BestLighthouseTime != int.MaxValue)
        {
            MessageManager.AddMessage($"That's the fastest you've done it yet!");
        }
        GameState.BestLighthouseTime = Math.Min(GameState.BestLighthouseTime, duration);

        var table = ItemManager.Instance.GetMinigameDropTable("Lighthouse").DropTable;

        var drop1 = table.GetDrop();
        var drop2 = table.GetDrop();

        Player.Instance.Inventory.AddDrop(drop1, out int dropAmount1);
        if (GameState.CurrentAFKAction == null)
        {            
            Player.Instance.Inventory.AddDrop(drop2, out int dropAmount2);
            MessageManager.AddMessage($"You get {dropAmount1} {drop1.Item.GetName(dropAmount1)} and {dropAmount2} {drop2.Item.GetName(dropAmount2)}.");


        }
        else
        {

            MessageManager.AddMessage($"You successfully escape the lighthouse and split your loot with your adventuring partner.");
            MessageManager.AddMessage($"You get {dropAmount1} {drop1.Item.GetName(dropAmount1)} from your raid and {Player.Instance.CurrentFollower.Name} gets {drop2.Amount} {drop2.Item.GetName(drop2.Amount)}.");
        }

    }
    private void ChangeRoom(string newRoom)
    {
        GameState.StopNonCombatActions();
        room = newRoom;
        if (RoomEnemies.ContainsKey(room))
        {
            string opponent = RoomEnemies[room][currentFloor];
            BattleManager.Instance.StartBattle(BattleManager.Instance.GetMonsterByName(opponent));
        }


        GameState.UpdateState();
    }

    private void StartGauntlet()
    {
        GameState.StartingLighthouseTick = GameState.CurrentTick;
        GameState.IsInLighthouse = true;
        ChangeLocations("Gauntlet");
        ChangeRoom("Combat");
        BattleManager.Instance.CurrentOpponents.Clear();
        BattleManager.Instance.CurrentOpponents.Add(BattleManager.Instance.GetMonsterByName("Wilting Stormling"));
        BattleManager.Instance.StartBattle();
    }
    private bool CheckForItemsInInventory()
    {
        if (Player.Instance.Inventory.GetUsedSpaces() != 0)
        {
            return true;
        }
        return false;
    }
    private void EnterGauntlet()
    {
        if (CheckForItemsInInventory())
        {
            string msg = "The handle feels hot to the touch.";
            string item = " Your " + Player.Instance.Inventory.GetUniqueItems()[0].Key.Name + " begins to tremble violently.";
            MessageManager.AddMessage(msg + item);
            GameState.UpdateState();
            return;
        }
        GameState.SetProgressFlag("Entered Lighthouse", true);
        MessageManager.AddMessage("You feel your stomach tighten as the world around you folds in on itself. The room stretches longer and wider, darkness envelops you. In a moment the sensation passes and you find yourself standing in an open room made of cold, gray stone. There is a layer of leaves on the ground, which glow just enough allow you to see around.");
        ChangeLocations("B-2");
        GameState.UpdateState();
    }

    private void ChangeLocations(string newloc)
    {
        Player.Instance.LighthouseLocation = newloc;
        GameState.UpdateState();
    }
    private void Exit()
    {
        GameState.GoToArea("CantilaBeach");
        //UriHelper.NavigateTo("/World/CantilaBeach");
        GameState.UpdateState();
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
        ChangeLocations("Outside");
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
