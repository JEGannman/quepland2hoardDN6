@page "/World/NorthTsuCity/AlchemyGuild"
@inject GameState GameState
@inject NavigationManager UriHelper

@if (thisBuilding != null)
{
    <h4>@location</h4>
    <div>
        @GetDescription()
    </div>
    

    @*@foreach(KeyValuePair<string, string> loc in Descriptions)
    {
        if(location != loc.Key)
        {
            <button class="btn btn-primary m-2" @onclick="(() => ChangeLocations(loc.Key))">@loc.Key</button>
        }
    }*@

    @if(location == "Entrance")
    {

    }
    else if(location == "Main Hall")
    {
        
    }
    else if(location == "Entry Hallway")
    {
        
    }
    else if(location == "Courtyard")
    {
        <Quepland_2_DN6.Components.NPCDialogComponent npc="Linehart Wichperger"></Quepland_2_DN6.Components.NPCDialogComponent>
    }
    else if(location == "Headmaster Tower")
    {
        <Quepland_2_DN6.Components.NPCDialogComponent npc="Hadeas Tajek"></Quepland_2_DN6.Components.NPCDialogComponent>

    }
    else if(location == "Dormatory")
    {
        <Quepland_2_DN6.Components.NPCDialogComponent npc="Marschna Finrer"></Quepland_2_DN6.Components.NPCDialogComponent>
        <Quepland_2_DN6.Components.NPCDialogComponent npc="Rodor Bavnidsko"></Quepland_2_DN6.Components.NPCDialogComponent>
    }
    else if(location == "Library")
    {
        if(GameState.CurrentTick > libraryEntranceTick + waitTicksBeforeLinehartAppears)
        {
            <Quepland_2_DN6.Components.NPCDialogComponent depthOnLoad=20 npc="Linehart Wichperger" ></Quepland_2_DN6.Components.NPCDialogComponent>
        }
        
    }
}

@code {
    private Dictionary<string, string> Descriptions = new Dictionary<string, string>()
    {
           {"Entrance", "You step into a brightly lit courtyard. The center of the room has a wide, open sunroof that opens over a shallow pool. On the far side of the room are double doors that lead further into the complex." },
           {"Main Hall", "The main hall houses a massive table made of solid metal. A pair of mirrors sit facing each chair that surround the table." },
           {"Entry Hallway", "There are two booths built into the wall of the hallway here. One sells elements, the other, metals. Both appear to be quite expensive." },
           {"Courtyard",  "The main buildings of the guild encircle the main hall, which is surrounded by a large courtyard. You can see the doors to the dormitory, as well as the library." },
           {"Library", "For an expansive building, the library is barren. Empty shelves line the walls of the building, and only a handful of books can be seen lying about, covered in a thick layer of dust. A notice on the wall lists the guild members and their checkout list." },
           {"Headmaster Tower",  "The headmaster lives at the top of the stairs. A series of mirrors line the walls, allowing anyone at the top of the stairs to see all the way down to the bottom." },
           {"Dormatory", "The dormatory is almost entirely empty. A hallway of doors to one side is completely boarded up."}
    };
    private string location = "Entrance";
    [Parameter]
    public string areaURL { get; set; }
    [Parameter]
    public string buildingURL { get; set; }
    public Building thisBuilding { get; set; }
    private int libraryEntranceTick = 0;
    private int waitTicksBeforeLinehartAppears = 100;

    public string GetDescription()
    {
        return Descriptions[location];
    }

    public void ChangeLocations(string newLoc)
    {
        location = newLoc;
        if(location == "Library")
        {
            libraryEntranceTick = GameState.CurrentTick;
        }
    }

    private void Exit()
    {
        GameState.GoTo("/World/NorthTsuCity/");
        GameState.UpdateState();
    }
    private void Talk(Dialog d)
    {
        d.Talk();
        GameState.UpdateState();
    }

    protected override void OnParametersSet()
    {
        thisBuilding = AreaManager.Instance.GetAreaByURL("NorthTsuCity").GetBuildingByURL("AlchemyGuild");
        GameState.UpdateState();
    }
    protected override void OnInitialized()
    {

        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e)
    {
        StateHasChanged();
    }
}
