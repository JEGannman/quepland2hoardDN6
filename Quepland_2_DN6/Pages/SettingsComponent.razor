@inject GameState GameState
@inject NavigationManager UriHelper

@implements IDisposable

<div class="col no-gutters" style="position:absolute;padding:5px;min-height:700px;background-color:#000000DD;z-index:10;margin-left: -15px;">
    <h3>Settings</h3>
    <div style="border:solid 1px gray;padding:1em;">
        <div>
            The game autosaves once every @(Extensions.GameTicksToSeconds(GameState.AutoSaveInterval) / 60f) Minutes, but you can manually save here. If it was successful, the save time in the bottom left corner will change.
        </div>
        <div>
            <button class="btn btn-primary" @onclick="@(() => Save())">Manual Save</button>
        </div>
    </div>
    <div style="border:solid 1px gray;padding:1em;">
        <div>
            <button class="btn btn-primary" style="margin:10px;padding:10px;" @onclick="@(() => CompactInventory())">Compact Inventory</button>
            Compact inventory shows all items as single stacks, even when they aren't stackable. This can save screen space for smaller screens.
        </div>
        <div>
            <button class="btn btn-primary" style="margin:10px;padding:10px;" @onclick="@(() => HideLockedItems())">Hide Locked Items</button>
            This makes locked items not appear in your inventory, if you don't want to see them.
        </div>
        <div>
            <button class="btn btn-primary" style="margin:10px;padding:10px;" @onclick="@(() => ToggleBackgrounds())">Toggle Backgrounds</button>
            This toggles the background images if you prefer the plain background.
        </div>
        <div>
            <button class="btn btn-primary" style="margin:10px;padding:10px;" @onclick="@(() => ToggleOldBankMode())">Toggle Old Bank Mode</button> 
            (@(GameState.UseOldBank ? "Currently: On" : "Currently: Off"))
            <div>                      
                This uses the old method of bank viewing.
                The new bank view exists because the bank used to be very slow, 
                but Blazor has been updated and it should be a bit more performant now. 
                Use this if you cannot scroll or the new bank method does not work for you. 
                Let me know if it runs nicely, it may be time to just go back to regular rendering.
            </div>
        </div>
        <div style="margin-top:10px;padding:10px;">
            <label for="extract-value">Maximum Extract Value</label>
            <input id="extract-value" type="number" min="1" @bind-value="@GameState.ExtractWarningValue" />
            This is the most expensive item value you can use the extract spell on. (Note that an item's value is double the sell value.)
        </div>
    </div>
    <div style="border:solid 1px gray;padding:1em;">
        You can export your save to keep a backup somewhere. You can load an exported save from the main menu.
        <div>
            <button class="btn btn-primary" style="margin:10px;padding:10px;" @onclick="@(() => ExportSave())">Export Save</button>
            <input @bind-value="@exportedSave" />
        </div>
     </div>
    <div style="border:solid 1px gray;padding:1em;">
        If you have experienced a save game bug, the broken save is stored localStorage. You can retrieve it here and send it to the developer on discord for fixing.
        <div>
            <button class="btn btn-primary" style="margin:10px;padding:10px;" @onclick="@(() => GetBrokenSave())">Get Broken Save</button>
            <input @bind-value="@brokenSave" />
        </div>
        
    </div>
   
    <div style="border:solid 1px gray;padding:1em;">
        <div style="text-align:center;">
            <a target="_blank" href="https://discord.gg/bkH9MZa"><img style="height:50px;width:50px;background-color:white;border-radius:5px;cursor:pointer;" src="/data/Images/DiscordLogo.png" /></a> Join the <a target="_blank" href="https://discord.gg/bkH9MZa">Discord</a> for suggestions, guides, and community
        </div>
        <div>
            Version:@GameState.Version
        </div>
   </div>
</div>
   


@code {
    private string brokenSave = "";
    private string exportedSave = "";
    private bool restoreFollowersMenu;
    private bool hasRestoredFollowers;
    private bool QRMenu;
    private List<Follower> followersToRestore = new List<Follower>();

    public async void Save()
    {
        await SaveManager.SaveGame();
        MessageManager.AddMessage("Successfully saved the game.");
    }

    public async Task GetBrokenSave()
    {
        brokenSave = await SaveManager.GetItemAsync<string>("SaveError");
    }

    public void ToggleOldBankMode()
    {
        GameState.UseOldBank = !GameState.UseOldBank;
    }
    public void ToggleFollower(Follower f)
        {
            if(followersToRestore.Contains(f) == false)
            {
                followersToRestore.Add(f);
            }
            else
            {
                followersToRestore.Remove(f);
            }
            GameState.UpdateState();
        }
        public void HideLockedItems()
        {
            GameState.HideLockedItems = !GameState.HideLockedItems;
            Player.Instance.Inventory.RerenderAll();
            GameState.UpdateState();
        }

        public void RestoreFollowers()
        {
            foreach(Follower f in followersToRestore)
            {
                f.IsUnlocked = true;
                MessageManager.AddMessage(f.Name + " has returned to you.");
            }
            hasRestoredFollowers = true;
            SaveManager.SaveGame(true);
            GameState.UpdateState();
        }
        public void ToggleBackgrounds(){
            GameState.ShowBackgrounds = !GameState.ShowBackgrounds;
        }
        public void CompactInventory()
        {
            GameState.CompactInventoryView = !GameState.CompactInventoryView;
            GameState.UpdateState();
        }
        public void EnableNewCompression()
        {
            GameState.UseNewSaveCompression = !GameState.UseNewSaveCompression;
        }
        public bool IsTesting()
        {
            return UriHelper.BaseUri.Contains("localhost");

        }
        public void ExportSave()
        {
            exportedSave = SaveManager.GetSaveExport();
        }
        public void ImportSave()
        {
            SaveManager.ImportSave(exportedSave);
        }
        public void ResizeWindow(int w)
        {
            GameState.MinWindowWidth = w;
            GameState.UpdateState();
        }
        protected override void OnInitialized()
        {
            GameState.StateChanged += OnGameStateChanged;
        }
        public void Dispose()
        {
            GameState.StateChanged -= OnGameStateChanged;
        }
        void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
    }
