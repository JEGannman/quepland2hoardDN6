@inject GameState GameState
@inject NavigationManager UriHelper

@implements IDisposable

<div class="row no-gutters" style="position:absolute;top:60px;display:flex;padding:5px;min-height:700px;background-color:black;z-index:10;">

    <div class="col-4">
        <button class="btn btn-primary" @onclick="@(() => SaveManager.SaveGame())">Manual Save</button>
        <div>
            The game autosaves once every @(Extensions.GameTicksToSeconds(GameState.AutoSaveInterval) / 60f) Minutes, but you can manually save here. If it was successful, the save time in the bottom left corner will change.
        </div>
    </div>
    <div class="col-4">
        <div>
            <button class="btn btn-primary" style="margin:10px;padding:10px;" @onclick="@(() => CompactInventory())">Compact Inventory</button>
        </div>
        <div>
            <button class="btn btn-primary" style="margin:10px;padding:10px;" @onclick="@(() => HideLockedItems())">Hide Locked Items</button>
        </div>
    </div>
    <div class="col-4">
        You can export your save to keep a backup somewhere. You can load an exported save from the main menu.
        <button class="btn btn-primary" style="margin:10px;padding:10px;" @onclick="@(() => ExportSave())">Export Save</button>
        <input @bind-value="@exportedSave" />
     </div>
    <div class="col-4">
        If you have experienced a save game bug, the broken save is stored localStorage. You can retrieve it here and send it to the developer on discord for fixing.
        <button class="btn btn-primary" style="margin:10px;padding:10px;" @onclick="@(() => GetBrokenSave())">Get Broken Save</button>
        <input @bind-value="@brokenSave" />
        </div>
   </div>

    <div style="text-align:center;position:absolute;right:25%;bottom:10px;width:300px;">
        <a target="_blank" href="https://discord.gg/bkH9MZa"><img style="height:50px;width:50px;background-color:white;border-radius:5px;cursor:pointer;" src="/data/Images/DiscordLogo.png" /></a> Join the <a target="_blank" href="https://discord.gg/bkH9MZa">Discord</a> for suggestions, guides, and community
    </div>
    <div style="position:absolute;right:10px;bottom:10px;">
        Version:@GameState.Version
    </div>


    @code {
    private string brokenSave = "";
        private string exportedSave = "";
        private bool restoreFollowersMenu;
        private bool hasRestoredFollowers;
        private bool QRMenu;
        private List<Follower> followersToRestore = new List<Follower>();

    public async Task GetBrokenSave()
    {
        brokenSave = await SaveManager.GetItemAsync<string>("SaveError");
    }

        public void ToggleFollower(Follower f)
        {
            if(followersToRestore.Contains(f) == false)
            {
                followersToRestore.Add(f);
            }
            else
            {
                followersToRestore.Remove(f);
            }
            GameState.UpdateState();
        }
        public void HideLockedItems()
        {
            GameState.HideLockedItems = !GameState.HideLockedItems;
            Player.Instance.Inventory.RerenderAll();
            GameState.UpdateState();
        }

        public void RestoreFollowers()
        {
            foreach(Follower f in followersToRestore)
            {
                f.IsUnlocked = true;
                MessageManager.AddMessage(f.Name + " has returned to you.");
            }
            hasRestoredFollowers = true;
            SaveManager.SaveGame(true);
            GameState.UpdateState();
        }

        public void CompactInventory()
        {
            GameState.CompactInventoryView = !GameState.CompactInventoryView;
            GameState.UpdateState();
        }
        public void EnableNewCompression()
        {
            GameState.UseNewSaveCompression = !GameState.UseNewSaveCompression;
        }
        public bool IsTesting()
        {
            return UriHelper.BaseUri.Contains("localhost");

        }
        public void ExportSave()
        {
            exportedSave = SaveManager.GetSaveExport();
        }
        public void ImportSave()
        {
            SaveManager.ImportSave(exportedSave);
        }
        public void ResizeWindow(int w)
        {
            GameState.MinWindowWidth = w;
            GameState.UpdateState();
        }
        protected override void OnInitialized()
        {
            GameState.StateChanged += OnGameStateChanged;
        }
        public void Dispose()
        {
            GameState.StateChanged -= OnGameStateChanged;
        }
        void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
    }
